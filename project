from os import error
import streamlit as st
import psycopg2
import datetime
from configparser import ConfigParser
import logging
import re
import pandas as pd
import hashlib

from streamlit.type_util import OptionSequence
#import psycopg2

regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w+$'


@st.cache
def get_config(filename="database.ini", section="postgresql"):
    parser = ConfigParser()
    parser.read(filename)
    return {k: v for k, v in parser.items(section)}


def make_hashes(password):
	return hashlib.sha256(str.encode(password)).hexdigest()


def check_hashes(password, hashed_text):
	if make_hashes(password) == hashed_text:
		return hashed_text
	return False


def checkEmail(email):
    if(email is None or email == ''):
        st.error('Email cannot be blank')
    if(email):
        if(not re.search(regex, email)):
            st.error('Invalid email id')


def add_userdata(username, password):
	insert_query_db(
	    f'INSERT INTO userstable(username,password) VALUES ( \'{username}\',\'{password}\' )')
	return


def login_user(username, password):
    return query_db(f'SELECT count(1) as found FROM userstable WHERE username =\'{username}\' AND password = \'{password}\';')['found'].loc[0]




def query_db(sql: str):
    print(sql)
    # print(f'Running query_db(): {sql}')

    db_info = get_config()

    # Connect to an existing database
    conn = psycopg2.connect(**db_info)

    # Open a cursor to perform database operations
    cur = conn.cursor()

    # Execute a command: this creates a new table
    cur.execute(sql)

    # Obtain data
    data = cur.fetchall()

    column_names = [desc[0] for desc in cur.description]

    # Make the changes to the database persistent
    conn.commit()

    # Close communication with the database
    cur.close()
    conn.close()

    df = pd.DataFrame(data=data, columns=column_names)

    return df


def insert_query_db(sql: str):
    print(sql)
    # print(f'Running query_db(): {sql}')

    db_info = get_config()

    # Connect to an existing database
    conn = psycopg2.connect(**db_info)

    # Open a cursor to perform database operations
    cur = conn.cursor()

    # Execute a command: this creates a new table
    cur.execute(sql)

    # Make the changes to the database persistent
    conn.commit()

    # Close communication with the database
    cur.close()
    conn.close()
    return


def insertUser(c_id_increment, fnampe, lnamep, dob, nationalityy, gender, email, housenum, street, city, state, zipcode, country_code, country, contact_number, nop, ec_fname, ec_lname, ec_cc, ec_contact,pspt_num,pspt_expd, c_type):
    checkEmail(email)
    if(dob > datetime.date.today()):
        st.error('Date is invalid')
        sql_insert_user = 'insert into vcvt_cust (c_id, fnamep,lnamep,dob,nationalityy, gender, email, housenum, street,city, state, zipcode,country_code,country,contact_number,nop,ec_fname,ec_lname, ec_cc, ec_contact,pspt_num,pspt_expd, c_type)values ( nextval(\'' + c_id_increment + '\'),\'' + fnampe.strip() + '\' , \'' + lnamep.strip() + '\' ,\'' + str(dob) + '\',\'' + nationalityy.strip() + '\', \'' + gender + '\',\'' + email + '\',' + str(housenum) + ' , ' + str(street) + ',\'' + city.strip() + '\',\'' + state.strip() + '\',' + str(zipcode) + ',' + str(country_code) + ',\'' + country + '\',' + str(contact_number) + ',' + str(nop) + ',\'' + ec_fname.strip() + '\', \'' + ec_lname.strip() + '\',\'' + str(ec_cc) + '\',\'' + str(ec_contact) + '\',\'' + str(pspt_num) + '\',\'' +str(pspt_expd)+ '\',\'' + str(c_type) + '\');'
        try:
            df = insert_query_db(sql_insert_user)
            st.write('User Created!')
        except Exception as e:
            print(e)
            st.write(
                "Sorry! Something went wrong with your query, please try again."
            )
    return

def insertPassenger(p_id_increment, fnampe, lnamep, dob, nationalityy, gender, email, housenum, street, city, state, zipcode, country_code, country, contact_number, nop, ec_fname, ec_lname, ec_cc, ec_contact, pspt_num,pspt_expd, c_type):
    checkEmail(email)
    if(dob > datetime.date.today()):
        st.error('Date is invalid')
        sql_insert_psngr = 'insert into vcvt_psngr(p_id, fnamep,lnamep,dob,nationalityy, gender, email, housenum, street,city, state, zipcode,country_code,country,contact_number,nop,ec_fname,ec_lname, ec_cc, ec_contact, pspt_num,pspt_expd, c_type)values ( nextval(\'' + p_id_increment + '\'),\'' + fnampe.strip() + '\' , \'' + lnamep.strip() + '\' ,\'' + str(dob) + '\',\'' + nationalityy.strip() + '\', \'' + gender + '\',\'' + email + '\',' + str(housenum) + ' , ' + str(street) + ',\'' + city.strip() + '\',\'' + state.strip() + '\',' + str(zipcode) + ',' + str(country_code) + ',\'' + country + '\',' + str(contact_number) + ',' + str(nop) + ',\'' + ec_fname.strip() + '\', \'' + ec_lname.strip() + '\',\'' + str(ec_cc) + '\',\'' + str(ec_contact) + '\',\'' + str(pspt_num) + '\',\'' +str(pspt_expd)+ '\',\'' + str(c_type) + '\');'
        try:
            df = insert_query_db(sql_insert_psngr)
            st.write('Passenger Added!')
        except Exception as e:
            print(e)
            st.write(
                "Sorry! Something went wrong with your query, please try again."
            )
    return

def main():
    page_bg_img = '''
        <style>
        body {
        background-image: url("https://images.unsplash.com/photo-1542281286-9e0a16bb7366");
background-size: cover;
}
</style>
'''

    st.markdown(page_bg_img, unsafe_allow_html=True)
    st.title("Simple Login App")

    menu = ["Home", "Login", "SignUp"]


    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Home":
        st.subheader("Home")

    elif choice == "Login":
        st.subheader("Login Section")
        username = st.sidebar.text_input("User Name")
        password = st.sidebar.text_input("Password", type='password')
        if st.sidebar.checkbox("Login"):
			# if password == '12345':
            hashed_pswd = make_hashes(password)
            result = login_user(username, check_hashes(password, hashed_pswd))
            print(result)
            if result:
                st.write("Logged In as {}".format(username))
                temp  = ['New Customer', 'Add a passenger', 'Select Insurance Plan', 'Add Flight details', 'Checkout']
                choice = st.selectbox('Menu', temp)
                isvalid = 0

                if choice == 'New Customer':
                    fname = st.text_input('Enter your First name', max_chars=30)
                    lname = st.text_input('Enter your Last name', max_chars=30)
                    dob = st.date_input('Date of Birth')
                    nationalityy = st.text_input('Nationality', max_chars=30)
                    gender = st.selectbox('Gender', ['M', 'F'])
                    email = st.text_input('Enter your email', max_chars=30)
                    housenum = st.number_input('House Number', max_value=9999)
                    street = st.number_input('street Number', max_value=9999)
                    city = st.text_input('City', max_chars=30)
                    state = st.text_input('State', max_chars=30)
                    zipcode = st.text_input('Zipcode', max_chars=10)
                    country_code = st.number_input('country code', max_value=999)
                    country = st.text_input('Country', max_chars=30)
                    contact_number = st.number_input('contact number', min_value=999999999, max_value=9999999999)
                    nop = st.number_input('Number of Passengers travelling with you', min_value=99)
                    ec_fname = st.text_input('Emergency Contact first name', max_chars=30)
                    ec_lname = st.text_input('Emergency Contact Last name', max_chars=30)
                    ec_cc = st.number_input('Emergency contact country code', max_value=9999)
                    ec_contact = st.number_input('Emergency contact number', min_value=999999999, max_value=9999999999)
                    pspt_num= st.text_input('Passport number', max_chars=15)
                    pspt_expd = st.date_input('Date of Passport expiry', min_value=datetime.date.today() )
                    c_type = st.selectbox('Do you have any Booking agent or Membership', ['None', 'Booking Agent','Membership'])
                    if c_type:
                        if c_type == 'Booking Agent':
                            c_type = 'A'
                        elif c_type == 'Membership':
                            c_type = 'M'
                        elif c_type == 'None':
                            c_type = 'C'
                    if isvalid == 0:
                        if st.button('Submit'):
                            insertUser('c_id_increment', fname, lname, dob, nationalityy, gender, email, housenum, street,city, state, zipcode,country_code,country,contact_number,nop,ec_fname,ec_lname, ec_cc, ec_contact,pspt_num,pspt_expd, c_type  )
                            sql_cid = '  SELECT last_value FROM c_id_increment;'
                            st.write(query_db(sql_cid))
                            # restaurants = query_db(sql_find_rest)
                            # planid = st.selectbox('Select a plan:' ,  restaurants['name'].tolist())

                    elif choice == 'New Customer':
                        fname = st.text_input('Enter your First name', max_chars=30)
                        lname = st.text_input('Enter your Last name', max_chars=30)
                        dob = st.date_input('Date of Birth', max_value=datetime.date.today())
                        nationalityy = st.text_input('Nationality', max_chars=30)
                        gender = st.selectbox('Gender', ['M', 'F'])
                        email = st.text_input('Enter your email', max_chars=30)
                        housenum = st.number_input('House Number', max_value=9999)
                        street = st.number_input('street Number', max_value=9999)
                        city = st.text_input('City', max_chars=30)
                        state = st.text_input('State', max_chars=30)
                        zipcode = st.text_input('Zipcode', max_chars=10)
                        country_code = st.number_input('country code', max_value=999)
                        country = st.text_input('Country', max_chars=30)
                        contact_number = st.number_input('contact number', min_value=999999999, max_value=9999999999)
                        nop = st.number_input('Number of Passengers travelling with you', min_value=99)
                        ec_fname = st.text_input('Emergency Contact first name', max_chars=30)
                        ec_lname = st.text_input('Emergency Contact Last name', max_chars=30)
                        ec_cc = st.number_input('Emergency contact country code', max_value=9999)
                        ec_contact = st.number_input('Emergency contact number', min_value=999999999, 
                        max_value=9999999999)
                        pspt_num= st.text_input('Passport number', max_chars=15)
                        pspt_expd = st.date_input('Date of Passport expiry', min_value=datetime.date.today() )
                        c_type = st.selectbox('Do you have any Booking agent or Membership', ['None', 'Booking Agent', 'Membership'])
                        if c_type:
                            if c_type == 'Booking Agent':
                                c_type = 'A'
                            elif c_type == 'Membership':
                                c_type = 'M'
                            elif c_type == 'None':
                                c_type = 'C'
                        if isvalid == 0:
                            if st.button('Submit'):
                                insertUser('p_id_increment', fname, lname, dob, nationalityy, gender, email, housenum, street,city, state, zipcode,country_code,country,contact_number,nop,ec_fname,ec_lname, ec_cc, ec_contact,pspt_num,pspt_expd, c_type   )
                            sql_pid = '  SELECT last_value FROM p_id_increment;'
                            st.write(query_db(sql_pid))
                            # restaurants = query_db(sql_find_rest)
                            # planid = st.selectbox('Select a plan:' ,  restaurants['name'].tolist())
            
            
                    elif choice == 'Select Insurance Plan':
                        sql_insurance_plan = 'select pln_id , p_name , description from vcvt_ispln;'
                        insuranceplans = query_db(sql_insurance_plan)

                        planName =   st.selectbox("Choose a insurance plan", insuranceplans['p_name'].tolist())
                        if planName:
                            plan_id = insuranceplans.loc[insuranceplans['p_name'] == planName, 'pln_id'].iloc[0]
                        
                        if st.button('Submit'): 
                            sql_cust_ispln = 'INSERT INTO VCVT_CUST_ISPLN (PLN_ID, P_ID) VALUES (10,11111);     '
                        
                        if isvalid == 0:
                            if st.button('Submit'):
                                insertUser('p_id_increment', fname, lname, dob, nationalityy, gender, email, housenum, street,city, state, zipcode,country_code,country,contact_number,nop,ec_fname,ec_lname, ec_cc, ec_contact,pspt_num,pspt_expd, c_type   )
                            sql_pid = '  SELECT last_value FROM p_id_increment;'
                            st.write(query_db(sql_pid))
                            # restaurants = query_db(sql_find_rest)
                            # planid = st.selectbox('Select a plan:' ,  restaurants['name'].tolist())

            
            
            
            else:
                st.warning("Incorrect Username/Password")
    elif choice == "SignUp":
        st.subheader("Create New Account")
        new_user = st.text_input("Username")
        new_password = st.text_input("Password", type='password')
        if st.button("Signup"):
            add_userdata(new_user, make_hashes(new_password))
            st.success("You have successfully created a valid Account")
            st.info("Go to Login Menu to login")


if __name__ == '__main__':
    main()
